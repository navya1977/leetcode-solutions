class Solution {
public:
    bool isSafe(int n, int row, int col, vector<string>& board){
        for(int j=0; j<n; j++){
            if(board[row][j] == 'Q'){
                return false;
            }
        }
        for(int i=0; i<n; i++){
            if(board[i][col] == 'Q'){
                return false;
            }
        }
        int i = row, j = col;
        while(i>=0 && j<n){
            if(board[i][j] == 'Q'){
                return false;
            }
            i--;
            j++;
        }
        i = row, j = col;
        while(i>=0 && j >= 0){
            if(board[i][j] == 'Q'){
                return false;
            }
            i--;
            j--;   
        }
        return true;
    }
    void f(int n, int row, vector<string>& board, vector<vector<string>>& ans){
        if(row == n){
            ans.push_back(board);   
            return;
        }
        for(int col=0; col<n; col++){   
            if(isSafe(n, row, col, board) == true){
                board[row][col] = 'Q';
                f(n, row+1, board, ans);
                board[row][col] = '.';
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board (n, string(n, '.'));
        f(n, 0, board, ans);
        return ans;
    }
};
