class Solution {
public:
int helper(vector<int>&nums,int left,int right)
    {
        int cnt1 = 0,cnt2 = 0;
        while(left < nums.size() && nums[left]!=1)
        {
            left++;
            cnt1++;
        }
        while(right >= 0 && nums[right]!=1)
        {
            right--;
            cnt2++;
        }
        return (cnt1*cnt2) + cnt1 + cnt2 + 1;
    }
    int numSubarraysWithSum(vector<int>& nums, int goal) {
        int l = 0,r=0,cnt=0,total=0;
        if(goal == 0)
        {
            for(int i = 0 ;i < nums.size();i++)
            {
                if(nums[i] == 1)
                {
                    total+=(cnt*(cnt+1))/2;
                    cnt = 0;
                }
                else 
                    cnt++;
            }
            total+=(cnt*(cnt+1))/2;
            return total;
        }
        while(r < nums.size())
        {
            if(nums[r] == 1)
                cnt++;
            if(cnt > goal)
                total += helper(nums,l,r-1);
            while(cnt > goal)
            {
                if(nums[l] == 1)
                    cnt--;
                l++;
            }
            r++;
        }
        if(cnt == goal)
            total += helper(nums,l,r-1);
        return total;
    }
};
